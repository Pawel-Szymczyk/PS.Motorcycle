@page "/"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using PS.Motorcycle.Domain.Types
@inject AuthenticationStateProvider AuthenticationStateProvider

<div style="height: inherit;">
    
    <div class="breadcrumbs-container">
        <BreadcrumbComponent Breadcrumbs="@this.Breadcrumbs"></BreadcrumbComponent>
    </div>

    <div class="container-fluid" style="background-color: white;  height: calc(100% - 10rem); padding-top: 50px; padding-bottom: 50px; border-radius: 10px; box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px, rgba(60, 64, 67, 0.15) 0px 2px 6px 2px; overflow-y: auto;">

        <div class="container">

            <div>
                <div class="search-container">
                    <SearchComponent OnSearchClick="@this.OnSearchClick" />
                </div>


                @if(this.searchData is null)
                {
                    @*<p><em>Loading...</em></p>*@
                    <div>
                        <BodyTypeCaruselComponent OnBodyTypeClick="@this.OnBodyTypeFilterClick" />
                    </div>
                }
                else
                {
                    <div class="row">
                        <div class="col-sm-12 col-md-2" style="border-right: 1px solid rgba(0,0,0,.125);">
                            @*filters*@
                            <div class="filter-container">
                                <AzureCognitiveSearchMakeComponent MakeData="@this.makeData" 
                                                                   ModelData="@this.modelData" 
                                                                   OnMakeClick="@this.OnMakeClickHandlerAsync" 
                                                                   OnModelClick="@this.OnModelClickHandlerAsync" />
                                <AzureCognitiveSearchFacetComponent FacetsData="@this.facetsData" 
                                                                    OnFacetClick="@this.OnFacetClickHandlerAsync" />
                                <AzureCognitiveSearchProductionYearComponent YearData="@this.yearData" 
                                                                             OnMinYearChanged="@this.OnMinYearChangedHandlerAsync" 
                                                                             OnMaxYearChanged="@this.OnMaxYearChangedHandlerAsync" />
                                <AzureCognitiveSearchEngineCapacityComponent EngineCapacity="@this.engineCapacityData" 
                                                                             OnMinEngineCapacityChanged="@this.OnMinEngineCapacityChangedHandlerAsync"
                                                                             OnMaxEngineCapacityChanged="@this.OnMaxEngineCapacityChangedHandlerAsync" />
                            </div>
                        </div>

                        <div class="col-10 results-container">
                            @if(this.filters.Count() > 0)
                            {
                                <div class="filters-pils-container">
                                    <span class="badge rounded-pill bg-secondary filter-pill">Reset filters
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-clockwise filter-pill-close-btn" viewBox="0 0 16 16" @onclick="(async() => await this.OnFilterResetClick())">
                                          <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z"/>
                                          <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z"/>
                                        </svg>
                                    </span>

                                    @foreach(var filter in this.filters)
                                    {
                                        if(filter.Key.Equals("bodyType"))
                                        {
                                            BodyType type = (BodyType) Enum.Parse(typeof(BodyType), filter.Value);
                                            string value = type.ToString();

                                            <span class="badge rounded-pill bg-secondary filter-pill">
                                                @value
                                                <button type="button" class="btn-close btn-close-white filter-pill-close-btn" aria-label="Close" @onclick="(async() => await this.OnFilterRemoveClick(filter.Key))"></button>
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge rounded-pill bg-secondary filter-pill">@filter.Value
                                                <button type="button" class="btn-close btn-close-white filter-pill-close-btn" aria-label="Close" @onclick="(async() => await this.OnFilterRemoveClick(filter.Key))"></button>
                                            </span>
                                        }
                                    
                                    }
                                </div>
                            }
                        

                            <div class="row row-cols-1 row-cols-md-3 g-4 motorcycles-list">
                                @*results *@

                                @{
                                    var results = this.searchData.resultList?.GetResults().ToList();
                                }

                                @foreach(var result in results)
                                {
                                    string path = $"/motorcycle/{result.Document.Id}";
                                    <CardComponent Motorcycle="result.Document" Path="@path" />
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>

            
            

        </div>
    </div>



    @*pagination*@
    @if(this.searchData != null && this.searchData.pageCount > 1)
    {
        <div class="container-fluid" style="background-color: white; margin-top: 1em; border-radius: 10px; box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px, rgba(60, 64, 67, 0.15) 0px 2px 6px 2px;">
           
            <div class="row">
                <div class="col-2"></div>
                <div class="col-sm-12 col-md-10 pagination-container">
                        
                    <PagingComponent CurrentPage=@this.searchData.currentPage 
                                     LeftMostPage=@this.searchData.leftMostPage 
                                     PageCount=@this.searchData.pageCount 
                                     PageRange=@this.searchData.pageRange 
                                     SearchText=@this.searchData.searchText 
                                     OnSearchPagerClick=@this.OnSearchPagerClickHandlerAsync />

                </div>
            </div>
           
        </div>
    }
    


    <FooterComponent />
</div>

